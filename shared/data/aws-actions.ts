import type { AWSAction } from '../types'

// 다국어 지원을 위한 액션 데이터 생성 함수
export const createAWSActions = (t: (key: string) => string): Record<string, AWSAction[]> => ({
  s3: [
    {
      id: "s3-list-objects",
      name: t('awsActions.s3.listObjects.name') || 'List Objects',
      description: t('awsActions.s3.listObjects.description') || 'List objects in bucket',
      category: "read",
      actions: ["s3:ListBucket"],
      dependencies: ["s3:GetBucketLocation"],
      selected: false,
    },
    {
      id: "s3-read-objects",
      name: t('awsActions.s3.readObjects.name') || 'Read Objects',
      description: t('awsActions.s3.readObjects.description') || 'Download and read objects',
      category: "read",
      actions: ["s3:GetObject"],
      dependencies: ["s3:ListBucket", "s3:GetBucketLocation"],
      selected: false,
    },
    {
      id: "s3-write-objects",
      name: t('awsActions.s3.writeObjects.name') || 'Write Objects',
      description: t('awsActions.s3.writeObjects.description') || 'Upload and modify objects',
      category: "write",
      actions: ["s3:PutObject", "s3:PutObjectAcl"],
      selected: false,
    },
    {
      id: "s3-delete-objects",
      name: t('awsActions.s3.deleteObjects.name') || 'Delete Objects',
      description: t('awsActions.s3.deleteObjects.description') || 'Delete objects from bucket',
      category: "write",
      actions: ["s3:DeleteObject"],
      dependencies: ["s3:ListBucket"],
      selected: false,
    },
    {
      id: "s3-manage-buckets",
      name: t('awsActions.s3.manageBuckets.name') || 'Manage Buckets',
      description: t('awsActions.s3.manageBuckets.description') || 'Create and manage buckets',
      category: "admin",
      actions: ["s3:CreateBucket", "s3:DeleteBucket", "s3:PutBucketPolicy", "s3:GetBucketPolicy"],
      selected: false,
    },
  ],
  ec2: [
    {
      id: "ec2-view-instances",
      name: t('awsActions.ec2.viewInstances.name') || 'View Instances',
      description: t('awsActions.ec2.viewInstances.description') || 'View EC2 instances',
      category: "read",
      actions: ["ec2:DescribeInstances", "ec2:DescribeInstanceStatus"],
      selected: false,
    },
    {
      id: "ec2-control-instances",
      name: t('awsActions.ec2.controlInstances.name') || 'Control Instances',
      description: t('awsActions.ec2.controlInstances.description') || 'Start, stop, reboot instances',
      category: "write",
      actions: ["ec2:StartInstances", "ec2:StopInstances", "ec2:RebootInstances"],
      dependencies: ["ec2:DescribeInstances"],
      selected: false,
    },
    {
      id: "ec2-manage-instances",
      name: t('awsActions.ec2.manageInstances.name') || 'Manage Instances',
      description: t('awsActions.ec2.manageInstances.description') || 'Create and terminate instances',
      category: "admin",
      actions: ["ec2:RunInstances", "ec2:TerminateInstances"],
      dependencies: ["ec2:DescribeInstances", "ec2:DescribeImages", "ec2:DescribeSecurityGroups"],
      selected: false,
    },
  ],
  lambda: [
    {
      id: "lambda-view-functions",
      name: t('awsActions.lambda.viewFunctions.name') || 'View Functions',
      description: t('awsActions.lambda.viewFunctions.description') || 'List and view Lambda functions',
      category: "read",
      actions: ["lambda:ListFunctions", "lambda:GetFunction"],
      selected: false,
    },
    {
      id: "lambda-invoke-functions",
      name: t('awsActions.lambda.invokeFunctions.name') || 'Invoke Functions',
      description: t('awsActions.lambda.invokeFunctions.description') || 'Execute Lambda functions',
      category: "write",
      actions: ["lambda:InvokeFunction"],
      dependencies: ["lambda:GetFunction"],
      selected: false,
    },
    {
      id: "lambda-manage-functions",
      name: t('awsActions.lambda.manageFunctions.name') || 'Manage Functions',
      description: t('awsActions.lambda.manageFunctions.description') || 'Create and manage Lambda functions',
      category: "admin",
      actions: ["lambda:CreateFunction", "lambda:UpdateFunctionCode", "lambda:DeleteFunction"],
      dependencies: ["iam:PassRole"],
      selected: false,
    },
  ],
  dynamodb: [
    {
      id: "dynamodb-read-data",
      name: t('awsActions.dynamodb.readData.name') || 'Read Data',
      description: t('awsActions.dynamodb.readData.description') || 'Read items from tables',
      category: "read",
      actions: ["dynamodb:GetItem", "dynamodb:Query", "dynamodb:Scan"],
      selected: false,
    },
    {
      id: "dynamodb-write-data",
      name: t('awsActions.dynamodb.writeData.name') || 'Write Data',
      description: t('awsActions.dynamodb.writeData.description') || 'Add and update items',
      category: "write",
      actions: ["dynamodb:PutItem", "dynamodb:UpdateItem"],
      selected: false,
    },
    {
      id: "dynamodb-delete-data",
      name: t('awsActions.dynamodb.deleteData.name') || 'Delete Data',
      description: t('awsActions.dynamodb.deleteData.description') || 'Delete items from tables',
      category: "write",
      actions: ["dynamodb:DeleteItem"],
      selected: false,
    },
    {
      id: "dynamodb-manage-tables",
      name: t('awsActions.dynamodb.manageTables.name') || 'Manage Tables',
      description: t('awsActions.dynamodb.manageTables.description') || 'Create and manage tables',
      category: "admin",
      actions: ["dynamodb:CreateTable", "dynamodb:UpdateTable", "dynamodb:DeleteTable", "dynamodb:DescribeTable"],
      selected: false,
    },
  ],
  sns: [
    {
      id: "sns-publish-messages",
      name: t('awsActions.sns.publishMessages.name') || 'Publish Messages',
      description: t('awsActions.sns.publishMessages.description') || 'Send messages to topics',
      category: "write",
      actions: ["sns:Publish"],
      dependencies: ["sns:GetTopicAttributes"],
      selected: false,
    },
    {
      id: "sns-manage-subscriptions",
      name: t('awsActions.sns.manageSubscriptions.name') || 'Manage Subscriptions',
      description: t('awsActions.sns.manageSubscriptions.description') || 'Subscribe and unsubscribe',
      category: "write",
      actions: ["sns:Subscribe", "sns:Unsubscribe", "sns:ConfirmSubscription"],
      dependencies: ["sns:ListSubscriptionsByTopic"],
      selected: false,
    },
    {
      id: "sns-manage-topics",
      name: t('awsActions.sns.manageTopics.name') || 'Manage Topics',
      description: t('awsActions.sns.manageTopics.description') || 'Create and manage topics',
      category: "admin",
      actions: ["sns:CreateTopic", "sns:DeleteTopic", "sns:SetTopicAttributes"],
      selected: false,
    },
  ],
  cloudwatch: [
    {
      id: "cloudwatch-view-metrics",
      name: t('awsActions.cloudwatch.viewMetrics.name') || 'View Metrics',
      description: t('awsActions.cloudwatch.viewMetrics.description') || 'View CloudWatch metrics',
      category: "read",
      actions: ["cloudwatch:GetMetricStatistics", "cloudwatch:ListMetrics"],
      selected: false,
    },
    {
      id: "cloudwatch-manage-alarms",
      name: t('awsActions.cloudwatch.manageAlarms.name') || 'Manage Alarms',
      description: t('awsActions.cloudwatch.manageAlarms.description') || 'Create and manage alarms',
      category: "write",
      actions: ["cloudwatch:PutMetricAlarm", "cloudwatch:DeleteAlarms"],
      dependencies: ["cloudwatch:DescribeAlarms"],
      selected: false,
    },
    {
      id: "cloudwatch-manage-logs",
      name: t('awsActions.cloudwatch.manageLogs.name') || 'Manage Logs',
      description: t('awsActions.cloudwatch.manageLogs.description') || 'Create and manage log groups',
      category: "write",
      actions: ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"],
      selected: false,
    },
  ],
  sqs: [
    {
      id: "sqs-receive-messages",
      name: t('awsActions.sqs.receiveMessages.name') || 'Receive Messages',
      description: t('awsActions.sqs.receiveMessages.description') || 'Receive and delete messages',
      category: "read",
      actions: ["sqs:ReceiveMessage", "sqs:DeleteMessage", "sqs:GetQueueAttributes"],
      selected: false,
    },
    {
      id: "sqs-send-messages",
      name: t('awsActions.sqs.sendMessages.name') || 'Send Messages',
      description: t('awsActions.sqs.sendMessages.description') || 'Send messages to queue',
      category: "write",
      actions: ["sqs:SendMessage", "sqs:GetQueueUrl"],
      selected: false,
    },
    {
      id: "sqs-manage-queues",
      name: t('awsActions.sqs.manageQueues.name') || 'Manage Queues',
      description: t('awsActions.sqs.manageQueues.description') || 'Create and manage queues',
      category: "admin",
      actions: ["sqs:CreateQueue", "sqs:DeleteQueue", "sqs:SetQueueAttributes"],
      selected: false,
    },
  ],
})

// 기본 액션 데이터 (번역 없이)
export const defaultAWSActions: Record<string, AWSAction[]> = {
  s3: [
    {
      id: "s3-list-objects",
      name: "List Objects",
      description: "List objects in bucket",
      category: "read",
      actions: ["s3:ListBucket"],
      dependencies: ["s3:GetBucketLocation"],
      selected: false,
    },
    {
      id: "s3-read-objects",
      name: "Read Objects",
      description: "Download and read objects",
      category: "read",
      actions: ["s3:GetObject"],
      dependencies: ["s3:ListBucket", "s3:GetBucketLocation"],
      selected: false,
    },
    {
      id: "s3-write-objects",
      name: "Write Objects",
      description: "Upload and modify objects",
      category: "write",
      actions: ["s3:PutObject", "s3:PutObjectAcl"],
      selected: false,
    },
    {
      id: "s3-delete-objects",
      name: "Delete Objects",
      description: "Delete objects from bucket",
      category: "write",
      actions: ["s3:DeleteObject"],
      dependencies: ["s3:ListBucket"],
      selected: false,
    },
    {
      id: "s3-manage-buckets",
      name: "Manage Buckets",
      description: "Create and manage buckets",
      category: "admin",
      actions: ["s3:CreateBucket", "s3:DeleteBucket", "s3:PutBucketPolicy", "s3:GetBucketPolicy"],
      selected: false,
    },
  ],
  // 다른 서비스들도 동일한 패턴으로 추가...
}